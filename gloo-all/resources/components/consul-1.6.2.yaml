---
# Source: consul/templates/server-disruptionbudget.yaml
# PodDisruptionBudget to prevent degrading the server cluster through
# voluntary cluster changes.
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: gloo-consul-server
  namespace: default
  labels:
    app: consul
    chart: consul-helm
    heritage: Tiller
    release: release-name
spec:
  maxUnavailable: 0
  selector:
    matchLabels:
      app: consul
      release: "release-name"
      component: server

---
# Source: consul/templates/server-config-configmap.yaml
# StatefulSet to run the actual Consul server cluster.
apiVersion: v1
kind: ConfigMap
metadata:
  name: gloo-consul-server-config
  namespace: default
  labels:
    app: consul
    chart: consul-helm
    heritage: Tiller
    release: release-name
data:
  extra-from-values.json: |-
    {}
    

---
# Source: consul/templates/server-serviceaccount.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: gloo-consul-server
  namespace: default
  labels:
    app: consul
    chart: consul-helm
    heritage: Tiller
    release: release-name

---
# Source: consul/templates/server-clusterrole.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: gloo-consul-server
  labels:
    app: consul
    chart: consul-helm
    heritage: Tiller
    release: release-name
rules: []

---
# Source: consul/templates/server-clusterrolebinding.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: gloo-consul-server
  labels:
    app: consul
    chart: consul-helm
    heritage: Tiller
    release: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gloo-consul-server
subjects:
  - kind: ServiceAccount
    name: gloo-consul-server
    namespace: default

---
# Source: consul/templates/dns-service.yaml
# Service for Consul DNS.
apiVersion: v1
kind: Service
metadata:
  name: gloo-consul-dns
  namespace: default
  labels:
    app: consul
    chart: consul-helm
    heritage: Tiller
    release: release-name
spec:
  ports:
    - name: dns-tcp
      port: 53
      protocol: "TCP"
      targetPort: dns-tcp
    - name: dns-udp
      port: 53
      protocol: "UDP"
      targetPort: dns-udp
  selector:
    app: consul
    release: "release-name"
    hasDNS: "true"

---
# Source: consul/templates/server-service.yaml
# Headless service for Consul server DNS entries. This service should only
# point to Consul servers. For access to an agent, one should assume that
# the agent is installed locally on the node and the NODE_IP should be used.
# If the node can't run a Consul agent, then this service can be used to
# communicate directly to a server agent.
apiVersion: v1
kind: Service
metadata:
  name: gloo-consul-server
  namespace: default
  labels:
    app: consul
    chart: consul-helm
    heritage: Tiller
    release: release-name
  annotations:
    # This must be set in addition to publishNotReadyAddresses due
    # to an open issue where it may not work:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None
  # We want the servers to become available even if they're not ready
  # since this DNS is also used for join operations.
  publishNotReadyAddresses: true
  ports:
    - name: http
      port: 8500
      targetPort: 8500
    - name: serflan-tcp
      protocol: "TCP"
      port: 8301
      targetPort: 8301
    - name: serflan-udp
      protocol: "UDP"
      port: 8301
      targetPort: 8301
    - name: serfwan-tcp
      protocol: "TCP"
      port: 8302
      targetPort: 8302
    - name: serfwan-udp
      protocol: "UDP"
      port: 8302
      targetPort: 8302
    - name: server
      port: 8300
      targetPort: 8300
    - name: dns-tcp
      protocol: "TCP"
      port: 8600
      targetPort: dns-tcp
    - name: dns-udp
      protocol: "UDP"
      port: 8600
      targetPort: dns-udp
  selector:
    app: consul
    release: "release-name"
    component: server

---
# Source: consul/templates/ui-service.yaml
# UI Service for Consul Server
apiVersion: v1
kind: Service
metadata:
  name: gloo-consul-ui
  namespace: default
  labels:
    app: consul
    chart: consul-helm
    heritage: Tiller
    release: release-name
spec:
  selector:
    app: consul
    release: "release-name"
    component: server
  ports:
    - name: http
      port: 80
      targetPort: 8500

---
# Source: consul/templates/server-statefulset.yaml
# StatefulSet to run the actual Consul server cluster.
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gloo-consul-server
  namespace: default
  labels:
    app: consul
    chart: consul-helm
    heritage: Tiller
    release: release-name
    component: server
spec:
  serviceName: gloo-consul-server
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app: consul
      chart: consul-helm
      release: release-name
      component: server
      hasDNS: "true"
  template:
    metadata:
      labels:
        app: consul
        chart: consul-helm
        release: release-name
        component: server
        hasDNS: "true"
      annotations:
        "consul.hashicorp.com/connect-inject": "false"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: consul
                  release: "release-name"
                  component: server
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 30
      serviceAccountName: gloo-consul-server
      securityContext:
        fsGroup: 1000
      volumes:
        - name: config
          configMap:
            name: gloo-consul-server-config
      containers:
        - name: consul
          image: "consul:1.6.2"
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            
          command:
            - "/bin/sh"
            - "-ec"
            - |
              CONSUL_FULLNAME="gloo-consul"

              exec /bin/consul agent \
                -advertise="${POD_IP}" \
                -bind=0.0.0.0 \
                -bootstrap-expect=1 \
                -client=0.0.0.0 \
                -config-dir=/consul/config \
                -datacenter=dc1 \
                -data-dir=/consul/data \
                -domain=consul \
                -hcl="connect { enabled = true }" \
                -ui \
                -retry-join=${CONSUL_FULLNAME}-server-0.${CONSUL_FULLNAME}-server.${NAMESPACE}.svc \
                -server
          volumeMounts:
            - name: data-default
              mountPath: /consul/data
            - name: config
              mountPath: /consul/config
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - consul leave
          ports:
            - containerPort: 8500
              name: http
            - containerPort: 8301
              name: serflan
            - containerPort: 8302
              name: serfwan
            - containerPort: 8300
              name: server
            - containerPort: 8600
              name: dns-tcp
              protocol: "TCP"
            - containerPort: 8600
              name: dns-udp
              protocol: "UDP"
          readinessProbe:
            # NOTE(mitchellh): when our HTTP status endpoints support the
            # proper status codes, we should switch to that. This is temporary.
            exec:
              command:
                - "/bin/sh"
                - "-ec"
                - |
                  curl http://127.0.0.1:8500/v1/status/leader \
                  2>/dev/null | grep -E '".+"'
            failureThreshold: 2
            initialDelaySeconds: 5
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 5
  volumeClaimTemplates:
    - metadata:
        name: data-default
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi

---
# Source: consul/templates/client-clusterrole.yaml


---
# Source: consul/templates/client-clusterrolebinding.yaml


---
# Source: consul/templates/client-config-configmap.yaml
# ConfigMap with extra configuration specified directly to the chart
# for client agents only.

---
# Source: consul/templates/client-daemonset.yaml
# DaemonSet to run the Consul clients on every node.

---
# Source: consul/templates/client-podsecuritypolicy.yaml


---
# Source: consul/templates/client-serviceaccount.yaml


---
# Source: consul/templates/client-snapshot-agent-clusterrole.yaml


---
# Source: consul/templates/client-snapshot-agent-clusterrolebinding.yaml


---
# Source: consul/templates/client-snapshot-agent-deployment.yaml


---
# Source: consul/templates/client-snapshot-agent-podsecuritypolicy.yaml


---
# Source: consul/templates/client-snapshot-agent-serviceaccount.yaml


---
# Source: consul/templates/connect-inject-authmethod-clusterrole.yaml


---
# Source: consul/templates/connect-inject-authmethod-clusterrolebinding.yaml


---
# Source: consul/templates/connect-inject-authmethod-serviceaccount.yaml


---
# Source: consul/templates/connect-inject-clusterrole.yaml
# The ClusterRole to enable the Connect injector to get, list, watch and patch MutatingWebhookConfiguration.

---
# Source: consul/templates/connect-inject-clusterrolebinding.yaml


---
# Source: consul/templates/connect-inject-deployment.yaml
# The deployment for running the Connect sidecar injector

---
# Source: consul/templates/connect-inject-mutatingwebhook.yaml
# The MutatingWebhookConfiguration to enable the Connect injector.

---
# Source: consul/templates/connect-inject-podsecuritypolicy.yaml


---
# Source: consul/templates/connect-inject-service.yaml
# The service for the Connect sidecar injector


---
# Source: consul/templates/connect-inject-serviceaccount.yaml


---
# Source: consul/templates/enterprise-license-clusterrole.yaml


---
# Source: consul/templates/enterprise-license-clusterrolebinding.yaml


---
# Source: consul/templates/enterprise-license-job.yaml


---
# Source: consul/templates/enterprise-license-podsecuritypolicy.yaml


---
# Source: consul/templates/enterprise-license-serviceaccount.yaml


---
# Source: consul/templates/mesh-gateway-clusterrole.yaml


---
# Source: consul/templates/mesh-gateway-clusterrolebinding.yaml


---
# Source: consul/templates/mesh-gateway-deployment.yaml


---
# Source: consul/templates/mesh-gateway-podsecuritypolicy.yaml


---
# Source: consul/templates/mesh-gateway-service.yaml


---
# Source: consul/templates/mesh-gateway-serviceaccount.yaml


---
# Source: consul/templates/server-acl-init-cleanup-clusterrole.yaml


---
# Source: consul/templates/server-acl-init-cleanup-clusterrolebinding.yaml


---
# Source: consul/templates/server-acl-init-cleanup-job.yaml


---
# Source: consul/templates/server-acl-init-cleanup-podsecuritypolicy.yaml


---
# Source: consul/templates/server-acl-init-cleanup-serviceaccount.yaml


---
# Source: consul/templates/server-acl-init-clusterrole.yaml


---
# Source: consul/templates/server-acl-init-clusterrolebinding.yaml


---
# Source: consul/templates/server-acl-init-job.yaml


---
# Source: consul/templates/server-acl-init-podsecuritypolicy.yaml


---
# Source: consul/templates/server-acl-init-serviceaccount.yaml


---
# Source: consul/templates/server-podsecuritypolicy.yaml


---
# Source: consul/templates/sync-catalog-clusterrole.yaml


---
# Source: consul/templates/sync-catalog-clusterrolebinding.yaml


---
# Source: consul/templates/sync-catalog-deployment.yaml
# The deployment for running the sync-catalog pod

---
# Source: consul/templates/sync-catalog-podsecuritypolicy.yaml


---
# Source: consul/templates/sync-catalog-serviceaccount.yaml


---
# Source: consul/templates/tests/test-runner.yaml


---
# Source: consul/templates/tls-init-cleanup-clusterrole.yaml


---
# Source: consul/templates/tls-init-cleanup-clusterrolebinding.yaml


---
# Source: consul/templates/tls-init-cleanup-job.yaml
# tls-init-cleanup job deletes Kubernetes secrets created by tls-init

---
# Source: consul/templates/tls-init-cleanup-podsecuritypolicy.yaml


---
# Source: consul/templates/tls-init-cleanup-serviceaccount.yaml


---
# Source: consul/templates/tls-init-clusterrole.yaml


---
# Source: consul/templates/tls-init-clusterrolebinding.yaml


---
# Source: consul/templates/tls-init-job.yaml
# tls-init job generate Consul cluster CA and certificates for the Consul servers
# and creates Kubernetes secrets for them.

---
# Source: consul/templates/tls-init-podsecuritypolicy.yaml


---
# Source: consul/templates/tls-init-serviceaccount.yaml


