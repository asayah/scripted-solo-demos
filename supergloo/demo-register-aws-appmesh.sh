#!/bin/bash

. $(dirname ${BASH_SOURCE})/../util.sh

SOURCE_DIR=$PWD

#desc "Create a namespace for our app"
#run "kubectl create ns bookinfo-appmesh"

#desc "Create app mesh secrets"
#run "supergloo create secret aws -i"



desc "Now, let's create an App Mesh"
run "supergloo register appmesh -i"

# name it "demo-appmesh", put it into `supergloo-system`
# point it to the secret we created
# which region? us-west-2?
# enable auto-injection? YES ==> If no, then you have to take care of manual injection (or use AWS mesh injector?) ... we were 90% done when they announced to open-souce .. .can change in the future... can dynamically configure it after it's been started. AWS one didn't have dynamic updating (at least last we looked). Example, can update the injection parameters by updating the config map and will dynamically use that... theirs is better with trying to figure out which VN all the pods belog to by checking the controllerr reference. Checks RS, Deployment, etc and uses that name as the name of the virtual node. We thought about adding, but right now we force to be explicit. Will create all proper certificates for webhook admission controller (is autogenerated/self-signed)
# Select labels or namespace to match to be auto-injected (ie pick the one that created in first step)
# use default config map for auto-injection
# Give the label to find the VN name "vn-name"
# Now should create the auto-injector, and create all the resources

# alternative command path:
# supergloo register appmesh --name demo-appmesh --namespace supergloo-system --secret supergloo-system.aws --region us-west-2 --auto-inject true --select-namespaces bookinfo-appmesh --virtual-node-label vn-name
backtotop

desc "Let's see that the autoinjector pod was created"
run "kubectl get pod -n supergloo-system"

desc "Let's see that the SuperGloo Mesh resource was created"
run "kubectl get mesh -n supergloo-system -o yaml"

desc "Let's check with aws that the mesh was created"
run "aws appmesh list-meshes"
